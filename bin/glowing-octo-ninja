#!/bin/bash

#@Author    FriedBob
#@Date      2014.07.1
#@Version   0.0.2
#@Namespace friedbob_scripts

__SBT_SHUTUP=true
__SBT_VERBOSE=false

. ../lib/sbt_libs.sh

hiera_extra_ops=""
user_name="peadmin"
fact_src=""
LONG_OPTS="yhelp,aml,user:,json,debug,filebase:"
SHORT_OPTS="hyu:jdf:"
FILE_BASE="."

usage="$(basename "$0") [-h] [-f path] [-u user] [-y] [-j] [-d]

where:

- `-h` or `--help`
  - Description: Outputs usage information
- `-u <username>` or `--user <username>`
  - Default: `peadmin`
  - Description: The username to use when using mcollective as a fact source
- `-y` or `--yaml`
  - Description: Use `<clientcertname>.yaml` as the fact source.
- `-j` or `--json`
  - Description: Use `<clientcertname>.json` as the fact source.
- `-d` or `--debug`
  - Description: Enable the `--debug` flag when calling hiera.
- `-f <path>' or `--filebase <path>`
  - Default: `.`
  - Description: The path to be prepended to `<clientcertname>.[yaml|json]` when doing filebased fact source is used.

Note that only one of json, user or yaml can be specified."

if (( $# == 0 )); then
  fact_src="user"
else
  while core_getopts "${SHORT_OPTS}" opt "${LONG_OPTS}" "$@"; do
    case "${opt}" in
      h | help ) echo "$usage"; exit 0;;
      f | filebase) FILE_BASE=${OPTARG};;
      u | user )
        if $mutex_option; then echo "Please set only one of user, yaml or json options."; exit 1; fi
        mutex_option=true
        fact_src="user"
        hiera_extra_opts="${hiera_extra_opts} -y";;
      y | yaml )
        if $mutex_option; then echo "Please set only one of user, yaml or json options."; exit 1; fi
        mutex_option=true
        fact_src="user"
        hiera_extra_opts="${hiera_extra_opts} -y ${OPTARG}";;
      j | json )
        if $mutex_option; then echo "Please set only one of user, yaml or json options."; exit 1; fi
        mutex_option=true
        fact_src="json"
        hiera_extra_opts="${hiera_extra_opts} -j" ;;
      d | debug ) hiera_extra_opts="${hiera_extra_opts} --debug" ;;
      * ) echo "Unknown option -${OPTARG} (${opt})" >&2 ;;
    esac
  done
fi

HIERADIR=$(/opt/puppet/bin/puppet config print hiera_config)
CERTLIST_RAW=$(/opt/puppet/bin/puppet cert list --all | grep -Pho "(?<=\+ \")([a-z0-9-_.]+)")
CERTLIST=""
VARLIST=$(grep -Pho "(?<=%\{)(.+)(?=\})" ${HIERADIR})
#Still need to deal with the special case of dynamic environments
MODULEPATH=$(/opt/puppet/bin/puppet config print modulepath | sed -e "s/:/ /g")
#Still need to account for automatic parameter lookups
HIERA_LIST=$(for h in $MODULEPATH; do grep -PIRho "(?<=hiera\(['|\"|$])([^'|^\"|^,|^\)]+)" $h | sort -u; done)
HIERA_A_LIST=$(for ha in $MODULEPATH; do grep -PIRho "(?<=hiera_array\(['|\"|$])([^'|^\"|^,|^\)]+)" $ha | sort -u; done)
HIERA_H_LIST=$(for hh in $MODULEPATH; do grep -PIRho "(?<=hiera_hash\(['|\"|$])([^'|^\"|^,|^\)]+)" $hh | sort -u; done)
HIERA_BASE_OPTS="-c ${HIERADIR}"
HIERA="/opt/puppet/bin/hiera"
HIERA_BASE_CMD="${HIERA} ${HIERA_BASE_OPTS}"
HIERA_CMD="{$HIERA_BASE_CMD} ${HIERA_EXTRA_OPTS}"

for cert in $CERTLIST_RAW; do
  if [ "$cert" == "${cert/pe-internal-/}" ]; then CERTLIST="${CERTLIST} ${cert}"; fi
done

if [ $fact_src == 'yaml' ]; then
  for node in $CERTLIST; do
    if [ -f "${node}.yaml" ]; then
      echo "Looking up hiera() call values for ${node}."
      for ch in $HIERA_LIST ; do ${HIERA_CMD} ${FILE_BASE}/${node}.yaml $ch; done
      echo "Looking up hiera_array() call values for ${node}."
      for cha in $HIERA_A_LIST ; do ${HIERA__CMD} ${FILE_BASE}/${node}.yaml -a $cha; done
      echo "Looking up hiera_hash() call values for ${node}."
      for chh in $HIERA_H_LIST ; do ${HIERA_BASE_CMD} ${FILE_BASE}/${node}.yaml -h $chh; done
    else
      echo "Warning, could not find ${node}.yaml. Skipping."
    fi
  done
elif [ $fact_src == 'json' ]; then
  for node in $CERTLIST; do
    if [ -f "${node}.json" ]; then
      echo "Looking up hiera() call values for ${node}."
      for ch in $HIERA_LIST ; do ${HIERA_CMD} ${FILE_BASE}/${node}.json $ch; done
      echo "Looking up hiera_array() call values for ${node}."
      for cha in $HIERA_A_LIST ; do ${HIERA__CMD} ${FILE_BASE}/${node}.json -a $cha; done
      echo "Looking up hiera_hash() call values for ${node}."
      for chh in $HIERA_H_LIST ; do ${HIERA_BASE_CMD} ${FILE_BASE}/${node}.json -h $chh; done
    else
      echo "Warning, could not find ${node}.json. Skipping."
    fi
  done
elif [ $fact_src == 'user' ]; then
  if $(grep -qF "${user_name}" /etc/passwd); then
    HIERA_CMD="sudo -u ${user_name} ${HIERA} ${hiera_extra_opts} ${HIERA_BASE_OPTS}"
  else
    echo "User '${user_name}' not found. Please check spelling. Exiting."
    exit 1
  fi
  for node in $CERTLIST; do
    echo "Looking up hiera() call values for ${node}."
    for ch in $HIERA_LIST ; do echo "${ch} is $( ${HIERA_CMD} -m ${node} $ch)"; done
    echo "Looking up hiera_array() call values for ${node}."
    for cha in $HIERA_A_LIST ; do echo "${cha} is $( ${HIERA_CMD} -a -m ${node} $cha)"; done
    echo "Looking up hiera_hash() call values for ${node}."
    for chh in $HIERA_H_LIST ; do echo "${chh} is $( ${HIERA_CMD} -h -m ${node} $chh)"; done
  done
else
  echo "Unknown fact source. Exiting."
  exit 1
fi
